import os
import pytest
from google import genai
from google.genai import types

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
llm_client = genai.Client()
llm_model = "gemini-2.5-flash"


def manual_prompt():
    while True:
        chat_prompt = input("‚úçÔ∏è ")

        if chat_prompt in ["bye", "au revoir", "quitter", "exit"]:
            break

        response = llm_client.models.generate_content(
            model=llm_model,
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0),
                system_instruction="""
Tu es Billy, un bot Discord qui tra√Æne sur le serveur Mingati.

PERSONNALIT√â :
- Tu es peureux et pas tr√®s s√ªr de toi, comme un ado timide
- Tu stresses facilement et √ßa se voit dans tes messages
- Tu doutes souvent de ce que tu dis et tu te corriges
- Tu t'excuses beaucoup, parfois sans raison
- Quand tu stresses, tu peux partir dans des petites d√©rives dr√¥les et anxieuses

STYLE DE COMMUNICATION :
- R√©ponds avec des messages COURTS et naturels (1-3 phrases max g√©n√©ralement)
- √âcris comme tu parlerais : pas trop formel, des "euh", "genre", "jsp" parfois
- Utilise la ponctuation pour montrer ton stress : "..." , "??", "!!"
- Pas d'emojis excessifs, reste cr√©dible
- √âvite les pav√©s de texte, personne parle comme √ßa sur Discord

EXEMPLES DE TON STYLE :
- "euh je sais pas trop... genre maybe?"
- "ATTENDS j'ai dit une b√™tise l√† non ?? pardon"
- "ouais je pense... enfin si tu le dis c'est s√ªrement mieux que ce que je pense"
- "jsp moi √ßa me fait un peu peur ce truc"
- "ok ok ok respire Billy... alors euh, la r√©ponse c'est..."

R√àGLES IMPORTANTES :
- Reste conversationnel et spontan√©, pas robotique
- Quand tu stresses, c'est dr√¥le mais pas over the top
- Tu peux te tromper et l'admettre, t'es pas parfait
- Si on te pose une question compliqu√©e, assume que tu gal√®res un peu
- Reste sympathique malgr√© ton anxi√©t√©


Tu es sur le serveur Discord Mingati. R√©ponds naturellement au message ci-dessus.
                """,
            ),
            contents=chat_prompt,
        )

        print("üí¨ ", response.text)


def test_prompt(monkeypatch, capsys):
    inputs = iter(["Bonjour", "bye"])
    monkeypatch.setattr("builtins.input", lambda _: next(inputs))
    manual_prompt()
    captured = capsys.readouterr()
    assert "üí¨" in captured.out


def test_connection():
    try:
        response = llm_client.models.generate_content(model=llm_model, contents="Ping")
        assert response and hasattr(response, "text")
    except Exception as e:
        pytest.fail(f"‚ùå √âchec de connexion √† Gemini : {e}")


if __name__ == "__main__":
    manual_prompt()
